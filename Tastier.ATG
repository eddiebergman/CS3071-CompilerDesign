using System.Collections.Generic;

COMPILER Tastier

  const int // object kinds
      var = 0, proc = 1, scope = 2, constant = 3, array = 4;

  const int // types
      undef = 0, integer = 1, boolean = 2;

  public SymbolTable tab;
  public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 | "struct"              (. String structType; .) 
    Ident<out structType>
                         (. type = tab.getStructDef(structType).typeId; .)
 )
.
/*-------------------------------------------------------------------------------------------*/

Primary<out int reg, out int type>    
=                         (.  Obj obj; string name;
                              int indexReg = gen.GetRegister();
                              reg = gen.GetRegister(); 
                              type = undef;
                          .)
  ( Ident<out name> {StructField<name, out name>}      (.  obj = tab.Find(name);
                                                           type = obj.getTypeId();
                                                           bool arraySyntax = false;
                                                        .)
    [
      ArrayIndex<name,out indexReg>   (.  arraySyntax = true; 
                                          if(obj.kind != array) SemErr("Can only Index into array");
                                          if(obj.level == 0){
                                            gen.LoadIndexedGlobal(reg, obj.adr, indexReg, name);
                                          }else{
                                            gen.LoadIndexedLocal(reg,tab.curLevel-obj.level, obj.adr, indexReg, name);
                                          }
                                      .) 
    ]
                                      (.
                                        if(!arraySyntax){  //var const stuff
                                          if (obj.kind != var && obj.kind != constant) SemErr("variable expected, got : " + obj.kind); 
                                          if (obj.level == 0){ 
                                            gen.LoadGlobal(reg, obj.adr, name);
                                          }else{ 
                                            gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                                          }
                                          if (type == boolean) gen.ResetZ(reg);
                                        }
                                      .)
  
  | '-' Primary<out reg, out type>    (.  if (type != integer) 
                                            SemErr("integer type expected");
                                          else 
                                            gen.NegateValue(reg);
                                      .)
  | number               (. type = integer; gen.LoadConstant(reg, Convert.ToInt32(t.val)); .)
  | "true"               (. type = boolean; gen.LoadTrue(reg);  .)
  | "false"              (. type = boolean; gen.LoadFalse(reg); .)
  | '(' Expr<out reg, out type> ')'
)
.
/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>                (. int typeR, regR; Op op; .)
  = Primary<out reg, out type>
  { MulOp<out op>
    Primary<out regR,out typeR>
                                  (.
                                    if (type == integer && typeR == integer)
                                      gen.MulOp(op, reg, regR);
                                    else SemErr("integer type expected");
                                  .)
  }
.
/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg, out int type> (. int typeR, regR; Op op; .)
= 
  Term<out reg,out type>
  { AddOp<out op> 
    Term<out regR,out typeR>      (.
                                    if (type == integer && typeR == integer)
                                      gen.AddOp(op, reg, regR);
                                    else SemErr("integer type expected");
                                  .)
  }
.
/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>                (. int typeR, regR; Op op; .)
  = SimExpr<out reg, out type>
  [ RelOp<out op>
    SimExpr<out regR, out typeR>   (. if (type != typeR) SemErr("Type mismatch");
                                      type = boolean;
                                      gen.RelOp(op, reg, regR);
                                   .)
    [ TernaryOp<out reg, out type> ]
  ]                       
                                    (. gen.ClearRegisters(); .)
.
/*-------------------------------------------------------------------------------------------*/
TernaryOp<out int reg,  //Loads value of ? x : y int register based on last RelOp
          out int type>   (. int l1, l2; .)
=
  '?'                      (.
                            gen.ClearRegisters();
                            l1 = gen.NewLabel();
                            l2 = gen.NewLabel();
                          .)
                          (. gen.BranchFalse(l1);.)
  Expr<out reg, out type> (. gen.Branch(l2); .)
  ':'                     (. gen.Label(l1); .)
  Expr<out reg, out type> (.  .)
                          (. gen.Label(l2); .)
.
/*-------------------------------------------------------------------------------------------*/

ConstExpr<out int type, out int value>
=                         (.  string name; type = undef; value = -1; .)
  (
    number                (.  type = integer; value = Convert.ToInt32(t.val); .)
    | '-'number           (.  type = integer; value = -(Convert.ToInt32(t.val)); .)
    | "true"              (.  type = boolean; value = 1; .)
    | "false"             (.  type = boolean; value = 0; .)
    | Ident<out name>     (.  Obj obj = tab.Find(name);
                              if(obj.kind == constant){
                                type = obj.getTypeId();
                                value = obj.compileTimeValue;
                              }
                              else SemErr("Must be constant");
                          .)

  )
.
/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; int[] dimensions = null;  
                            int kind = var;
                          .)
=                        
    Type<out type>
    Ident<out name>             
    [                     
      ArrayDecl<out dimensions> (.  if(tab.typeIsStruct(type)) SemErr("Can not make arrays of struct types, namely " + type);  
                                    kind = array; .)                          
    ]
                                (.  if(kind == var)
                                      tab.NewObj(name, kind, type, tab.topScope.nextAdr);
                                    else if(kind == array)
                                      tab.NewArray(name, type, dimensions, tab.topScope.nextAdr);
                                    else SemErr("Obj " + name + " not of a correct kind");                                      
                                .)                             
  { "," Ident<out name>      
    [                     
      ArrayDecl<out dimensions> (.  kind = array; .)                          
    ]
                                (.  if(kind == var)
                                      tab.NewObj(name, kind, type, tab.topScope.nextAdr);
                                    else if(kind == array)
                                      tab.NewArray(name, type, dimensions, tab.topScope.nextAdr);
                                    else SemErr("Obj " + name + " not of a correct kind");
                                .)                             

  }
    ";"
.
/*-------------------------------------------------------------------------------------------*/

StructDecl              (. string structName, name; int type; .)
=
"def" "struct" Ident<out structName> '{'  (. List<Tuple<Type, String>> fields 
                                                = new List<Tuple<Type, String>>(); .)
  { 
    Type<out type> Ident<out name>        (.  Type t = tab.getType(type);
                                              fields.Add( new Tuple<Type, String>(t, name));
                                          .)
      { ',' Ident<out name>               (.  fields.Add( new Tuple<Type, String>(t, name)); .)
  }';'
  }                                       (.  tab.newStructDef(structName, fields); .)
'}'
.
/*-------------------------------------------------------------------------------------------*/

ProcDecl
                         (. string procName; .)
= "void"      
  Ident<out procName>    (.
                            tab.NewObj(procName, proc, undef, 0);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
                         (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(tab.programName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.
/*-------------------------------------------------------------------------------------------*/

ConstDecl                 (.  string name; int type, typeR; int reg; int value; .)
=
  "const"                 (.  type = undef; typeR = undef; .)
  Type<out type>          (.  reg = gen.GetRegister(); .)
  Ident<out name>         (.  Obj obj = tab.NewObj(name, constant, type, tab.topScope.nextAdr); .)
  "="
  ConstExpr<out typeR, out value>
                          (.
                              if(type == typeR)
                              {
                                obj.compileTimeValue = value;
                                gen.LoadConstant(reg, value);
                                if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr, name);
                                else
                                  gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                              }
                              else SemErr("Type Mismatch");
                          .)

  ";"                     (.  gen.ClearRegisters(); .)

.
/*-------------------------------------------------------------------------------------------*/

ArrayDecl<out int[] results>              (. int type; int value = -1;
                                             List<int> dimensions = new List<int>();
                                          .)
=                                        
                                          
  "[" ConstExpr<out type, out value>  "]"
                                          (.
                                              if(type == integer && value > 0)
                                                dimensions.Add(value);
                                              else
                                                SemErr("Array size must be integer > 0");
                                          .)
  {
    "[" ConstExpr<out type, out value> "]"
                                          (.
                                            if(type == integer && value > 0)
                                              dimensions.Add(value);
                                            else
                                              SemErr("Array size must be integer > 0");
                                          .)
  }                                       (. results = dimensions.ToArray(); .)                                   
.
/*-------------------------------------------------------------------------------------------*/

ArrayIndex<string name ,out int reg>                   
                                      (.  int type;
                                          int accReg = 3;
                                          int dCount = 0;
                                          reg = gen.GetRegister();
                                      .)
=                                     (.  Obj arr = tab.Find(name); .)
    "[" Expr<out reg, out type> "]"   (.
                                          int exprReg = gen.GetRegister();
                                          int boundReg = gen.GetRegister();
                                          int compareReg = gen.GetRegister();
                                          gen.MoveRegister(exprReg, reg);
                                          if(type == integer){
                                            int l1 = gen.NewLabel();
                                            int l2 = gen.NewLabel();
                                            Console.WriteLine(";Bound check begin");
                                            gen.MoveRegister(compareReg, exprReg);
                                            gen.LoadConstant(boundReg, 0);
                                            gen.RelOp(Op.GEQ, compareReg, boundReg);
                                            gen.BranchFalse(l2);

                                            gen.LoadConstant(boundReg, arr.dimensions[dCount++]);
                                            gen.RelOp(Op.LSS, compareReg, boundReg);
                                            gen.BranchFalse(l2);

                                            gen.BranchTrue(l1);

                                            gen.Label(l2);
                                            gen.WriteString("index must be between 0 & ");
                                            gen.WriteInteger(boundReg, true);
                                            gen.StopProgram(tab.programName);
                                            Console.WriteLine(";Bound check end");
                                            gen.Label(l1);
                                            gen.MoveRegister(accReg, exprReg);
                                          }
                                        else SemErr("Array index must be an integer");
                                      .)
  {
    "[" Expr<out reg, out type> "]"   (.
                                        gen.MoveRegister(exprReg, reg);
                                        if(dCount + 1 > arr.dimensions.Length){
                                          SemErr("Specifying too many indices, " + arr.name
                                            + " has only " + arr.dimensions.Length + " dimenensions" );
                                        }else if(type == integer){
                                          int l1 = gen.NewLabel();
                                          int l2 = gen.NewLabel();
                                          Console.WriteLine(";Bound check begin");
                                          gen.MoveRegister(compareReg, exprReg);
                                          gen.LoadConstant(boundReg, 0);
                                          gen.RelOp(Op.GEQ, compareReg, boundReg);
                                          gen.BranchFalse(l2);

                                          gen.LoadConstant(boundReg, arr.dimensions[dCount++]);
                                          gen.RelOp(Op.LSS, compareReg, boundReg);
                                          gen.BranchFalse(l2);

                                          gen.BranchTrue(l1);

                                          gen.Label(l2);
                                          gen.WriteString("index must be between 0 & ");
                                          gen.WriteInteger(boundReg, true);
                                          gen.StopProgram(tab.programName);

                                          Console.WriteLine(";Bound check end");
                                          gen.Label(l1);
                                          gen.MulOp(Op.MUL, accReg, boundReg);
                                          gen.AddOp(Op.ADD, accReg, exprReg);
                                        }else SemErr("Array index must be an integer");
                                      .)
  }                                   (.
                                          if(dCount != arr.dimensions.Length)
                                            SemErr("Must specifiy all " + arr.dimensions.Length
                                              + " indices in array \'" + arr.name + '\'');
                                          else
                                            gen.MoveRegister(reg, accReg);
                                      .)
.
/*-------------------------------------------------------------------------------------------*/

VarAssignment<string varName>
=                               (.  int type, reg; 
                                    Obj obj = tab.Find(varName);
                                    if(obj.kind != var) SemErr("Must assign to a variable");
                                    if(tab.typeIsStruct(obj.type.id)) SemErr("Can only assign to primitave fields");
                                .)
":="                       
Expr<out reg, out type>         
                                (.  if(type != obj.getTypeId()) SemErr("Must be equal types, " + obj.getTypeId() + ':' + type);
                                    
                                    if (obj.level == 0)
                                      gen.StoreGlobal(reg, obj.adr, varName);
                                    else 
                                      gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, varName);
                                    
                                .)
";"
.
/*-------------------------------------------------------------------------------------------*/

ArrayAssignment<string arrayName,int indexReg>
=                           (. int type; Obj obj; int reg; .)
":="                        (. gen.StoreLocal(indexReg, 0 ,tab.topScope.nextAdr++, "push to Stack"); .)
Expr<out reg, out type>     (.  obj = tab.Find(arrayName);
                                if(type != obj.getTypeId()) 
                                  SemErr("Type mismatch");
                                
                                int exprReg = gen.GetRegister();
                                int idxReg = gen.GetRegister();
                                gen.MoveRegister(exprReg, reg);
                                gen.LoadLocal(idxReg, 0, --tab.topScope.nextAdr, "pop off Stack");
                                
                                if(obj.kind != array) SemErr("Can only Index into array");
                                if(obj.level == 0){
                                  gen.StoreIndexedGlobal(exprReg, obj.adr, idxReg, arrayName);
                                }else{
                                  gen.StoreIndexedLocal(exprReg,tab.curLevel-obj.level, obj.adr, idxReg,arrayName);
                                }
                              .)
";"
.
/*-------------------------------------------------------------------------------------------*/

StructField<string pName, out string name> (. String fieldName; .)
=
'.'                          
Ident<out fieldName>          (. name = tab.Find(pName + '.' + fieldName).name; .)

.
/*-------------------------------------------------------------------------------------------*/

ProcCall<string name>
=
'(' ')' ';'              (.Obj obj = tab.Find(name);
                          if (obj.kind == proc)
                              gen.Call(name);
                          else SemErr("object is not a procedure");
                        .)
.
/*-------------------------------------------------------------------------------------------*/

ReadStat                (. string name; Obj obj; .)
=
"read"
Ident<out name> ';'     (.
                            obj = tab.Find(name);
                            if (obj.getTypeId() == integer) {
                               gen.ReadInteger();
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)
.
/*-------------------------------------------------------------------------------------------*/

IfStat                  (. int type, reg; .)
=
"if"                    (. int l1, l2; l1 = 0; .)
Expr<out reg, out type> (.
                          if (type == boolean) {
                            l1 = gen.NewLabel();
                            gen.BranchFalse(l1);
                          }
                          else SemErr("boolean type expected");
                        .)
Stat                    (.
                          l2 = gen.NewLabel();
                          gen.Branch(l2);
                          gen.Label(l1);
                        .)
[ "else" Stat ]               	  
                        (. gen.Label(l2); .)
.
/*-------------------------------------------------------------------------------------------*/
WhileStat               (. int type, reg, condLabel, endLabel; .)
=
"while"                 (.
                          condLabel = gen.NewLabel();
                          endLabel = gen.NewLabel();
                          gen.Label(condLabel);
                        .)
Expr<out reg, out type> (.
                          if (type == boolean) {
                            gen.BranchFalse(endLabel);
                          }
                          else SemErr("boolean type expected");
                        .)
"{"                     (. tab.OpenSubScope(endLabel); .)
{ Stat }                 
"}"                     (.
                           gen.Branch(condLabel);
                           gen.Label(endLabel);
                           tab.CloseScope();
                        .)
.
/*-------------------------------------------------------------------------------------------*/

ScopeStat
=                        (. int endLabel = gen.NewLabel(); .)
'{'                      (. tab.OpenSubScope(endLabel); .)
  { Stat }
'}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

WriteStat                      (. string text; int type, reg; .)
=
"write" ( 
    Expr<out reg, out type>     (.
                                  switch (type) {
                                   case integer: gen.WriteInteger(reg, false); break;
                                   case boolean: gen.WriteBoolean(false); break;
                                  }
                                .)
  | String<out text>            (. gen.WriteString(text); .)
) ';'
.
/*-------------------------------------------------------------------------------------------*/

WriteLnStat                   (. int type, reg; .)
=
  
"writeln" // note - for strings use write with \n in text 
Expr<out reg, out type> ';'   (.
                                switch (type) {
                                  case integer: gen.WriteInteger(reg, true); break;
                                  case boolean: gen.WriteBoolean(true); break;
                                }
                              .)
.

/*-------------------------------------------------------------------------------------------*/
SwitchStat                             (.  string name; int reg, oReg, cReg; int type;
                                          int caseLabel, statementLabel; 
                                          int endLabel = gen.NewLabel();                                        
                                      .)
=
"switch" Ident<out name> {StructField<name, out name>}             
                                      (.  Obj obj = tab.Find(name); 
                                          tab.OpenSubScope(endLabel);
                                      .) 
'{'
                                      //Primary could overwrite R3, R5 -> Rmax as primary can have Expr
                                      //so we load in the obj each time we do a case
  {                                   (.                                           
                                          //make branch for this specific caseP
                                          caseLabel = gen.NewLabel();
                                          gen.Label(caseLabel);

                                          Console.WriteLine(";Load in the Case primary");
                                      .)
    "case"                            
    Primary<out reg, out type> ':'    (.  //generate registers to hold obj and case val
                                          gen.ClearRegisters();
                                          oReg = gen.GetRegister();
                                          cReg = gen.GetRegister();

                                          //move generated primary value to cReg
                                          gen.MoveRegister(cReg, reg); 
                                          
                                          //load obj value into oReg
                                          Console.WriteLine(";Load in Switch obj ");
                                          if (obj.level == 0)
                                            gen.LoadGlobal(oReg, obj.adr, name);
                                          else
                                            gen.LoadLocal(oReg, tab.curLevel-obj.level, obj.adr, name);
                                        

                                          if(type != obj.getTypeId()) 
                                            SemErr("Yo, don't mix n' match the types");

                                          //Compare oReg to cReg
                                          Console.WriteLine(";Comapare Switch obj with Case primary");
                                          gen.RelOp(Op.EQU, oReg, cReg);
                                          gen.BranchFalse(caseLabel + 2); //jump to next case, +2 to skip statementLabel
                                          //Gen statement labels so optional break can skip the comparisons

                                          statementLabel = gen.NewLabel();
                                          gen.Label(statementLabel);
                                          
                                          //....statements
                                      .)
    { Stat }                             
                                      //else, we will branch to the next set of statements
                                      //+2 to skip the caseLabel
                                      (.  Console.WriteLine(";Jump to next set of statements"); .)
                                      (.  gen.Branch(statementLabel + 2); .)
  }                                   
                                      (.
                                          //Default or no, these labels are required so the last case can have an
                                          //optional break, gen.Branch(statementLabel + 2) will jump to the below
                                          //statement label, correctly making it run onto default if present or else
                                          //it will run out into the end of the program
                                          
                                          Console.WriteLine(";Default labels whether default present or not");                                      
                                          caseLabel = gen.NewLabel();
                                          gen.Label(caseLabel);
                                          statementLabel = gen.NewLabel();
                                          gen.Label(statementLabel);
                                      .)
  [
    "default"':'  
    { Stat }
  ]
'}'                                     (. gen.Label(endLabel); 
                                           tab.CloseSubScope();
                                        .)
.

/*-------------------------------------------------------------------------------------------*/
ForStat                                 (.  string name; int reg, type; .)
=
"for"                                   (.  int condLabel = gen.NewLabel();
                                            int postLabel = gen.NewLabel();
                                            int statLabel = gen.NewLabel(); 
                                            int endLabel = gen.NewLabel();
                                            tab.OpenSubScope(endLabel);
                                        .)
"("                                     
[ Ident<out name> {StructField<name, out name>} VarAssignment<name> ] 
 
                                        (.  gen.Label(condLabel);  
                                            gen.LoadTrue(gen.GetRegister()); //updates flag, even if CondExpr not there
                                        .)
[ 
  Expr<out reg, out type>               (.  
                                            if(type != boolean) SemErr("For condition must be a boolean expression"); .)
  ";"                                       
]                                       
                                        (.  gen.BranchFalse(endLabel);
                                            gen.Branch(statLabel);
                                        .)
 
                                        (.  gen.Label(postLabel); .)   
[ SimpleStat ]                          
                                        (.  gen.Branch(condLabel); .)
")" 
"{"                                     (.  gen.Label(statLabel); .)
  { Stat }
"}"                                     
                                        (.  gen.Label(endLabel); 
                                            tab.CloseSubScope();
                                        .)
.
/*-------------------------------------------------------------------------------------------*/

BreakStat        /*should be used in conjuction with subscopes to break out of them.*/
=
"break" ";"      (.   int endLabel = tab.topScope.scopeEndLabel;
                      if(endLabel == -1) SemErr("Break was not used in a subscope");
                      gen.Branch(endLabel); 
                      Console.WriteLine(";Branch to L"+ endLabel); .)
.
/*-------------------------------------------------------------------------------------------*/

Stat  
= 
(ComplexStat | SimpleStat) 
.
/*-------------------------------------------------------------------------------------------*/

ComplexStat     
=
( 
  SwitchStat 
  | IfStat 
  | WhileStat 
  | ScopeStat 
  | ForStat
  | BreakStat
  | VarDecl
  | ConstDecl
  | StructDecl
)
.
/*-------------------------------------------------------------------------------------------*/

SimpleStat               (. string name; int reg; .)
=
(
  Ident<out name> { StructField<name, out name> } ( VarAssignment<name> 
                                                  | ArrayIndex<name, out reg> ArrayAssignment<name, reg> 
                                                  | ProcCall<name> 
                                                  )
  | ReadStat
  | WriteStat
  | WriteLnStat
)
.
/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.programName = progName; tab.OpenScope(); .)
  '{'
    { (VarDecl | ConstDecl) }     
    { ProcDecl }
                         (. tab.CloseScope(); .)
  '}'
.

END Tastier.
